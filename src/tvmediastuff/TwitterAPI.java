/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tvmediastuff;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Scanner;
import javax.swing.Timer;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.conf.ConfigurationBuilder;

/**
 *
 * @author aryaan
 */
public class TwitterAPI extends javax.swing.JPanel {
    javax.swing.JLabel titleLabel;
    javax.swing.JLabel infoLabel;
    int tweetNum = 1;
    List<twitter4j.Status> statuses = null;
    String user = getUsername();
    Image img;
    
    /**
     * Creates new form TwitterAPI. Constructor.
     */
    public TwitterAPI() {
        initComponents();
        ConfigurationBuilder cb = new ConfigurationBuilder();
        //logs you in to the twitter account
        cb.setDebugEnabled(true)
                .setOAuthConsumerKey("hAM8DCnQxaxkzBXXme3tWutL1")
                .setOAuthConsumerSecret("3HSg50WvExbL2O26fYIJmjAZTZLbmNbCpBWkWsrGu3pmnRqm2y")
                .setOAuthAccessToken("872627519261999105-2QFWKdPXyDDvTgapR8x8pzyd23tL555")
                .setOAuthAccessTokenSecret("Gyk8qMgDGPViSVPka5qZlJVaAn0V0iSMXGjsE1wWlKoyw");
        TwitterFactory tf = new TwitterFactory(cb.build());
        
        try {
            Twitter twitter = tf.getInstance();
            // Get time line
            statuses = twitter.getUserTimeline(user);
        } catch (TwitterException te) {
            System.out.println("Failed to get timeline: " + te.getMessage());
            System.exit(-1);
        }
    }
    
    /**
     * Returns the file path from the config file. Line 6.
     * 
     * @return String
     */
    public static String getUsername() {
        //Config file path
        File config = new File("config.txt");
        // If it dodesnt exist, create it
        if (!config.exists()) {
            try {
                config.createNewFile();
            } catch (IOException ex) {
                System.out.println("An error occured with the config file. Try again.");
            }
        }
        String line = "";
        Scanner scan;
        // Find the path name given by the user in the config file
        try {
            scan = new Scanner(config);
            for (int i = 0; i < 6; i++) {
                line = scan.nextLine();
            }
        } catch (FileNotFoundException ex) {
            System.out.println("An error occured with finding the config flie. Try again.");
        }
        return line;
    }
    
    /**
     * Gets label information from MainFrame, initializes local variables with this. Initialize and start
     * timer.
     * 
     * @param titleLabel jLabel
     * @param infoLabel jLabel
     */
    public void anim(javax.swing.JLabel titleLabel, javax.swing.JLabel infoLabel) {
        // Initialize variables
        this.titleLabel = titleLabel;
        this.infoLabel = infoLabel;
        // Set a timer for animation
        Timer timer = new Timer(10000, new TimerListener());
        timer.start();
    }
    
    /**
     * Iterating method to cycle through Tweets. Limits Tweets to the newest 5. Sets info to labels.
     */
    public void updateTweet() {
        // Limit for latest tweets
        if (tweetNum > 5) {
            tweetNum = 1;
        }
        // Set the text for the labels
        titleLabel.setText("<html>Showing @" + user + "'s Twitter timeline:</html>");
        infoLabel.setText("<html>" + (tweetNum) + ". @" + statuses.get(tweetNum-1).getUser().getScreenName() + " - " + statuses.get(tweetNum-1).getText() + "\n\n\n </html>");
        // Go to next index of time line
        tweetNum ++;
    }

    // Define timer param listener
    public class TimerListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            //shift the letter over
            updateTweet();
            //update window
            repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
