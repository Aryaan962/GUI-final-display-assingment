/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tvmediastuff;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.Timer;

/**
 *
 * @author cafen
 */
public class textPanel extends javax.swing.JPanel {

    //initialize variables
    File f = new File(getTxtFilePath());
    String displayed = "";
    String full = "";
    int numDisplayed = 35;
    int counter1 = 0;
    int charLimit = -1;
    int counter2 = counter1 + numDisplayed;
    javax.swing.JLabel label;

    /**
     * Creates new form textPanel
     */
    public textPanel() {

        initComponents();
        //set up the strings needed for program
        helper();
    }

    private void helper() {
        //put file into a format where each line is a string
        Scanner scan = null;
        String line = "";
        try {
            scan = new Scanner(f);
        } catch (FileNotFoundException ex) {
            System.out.println("ERROR FILE NOT FOUND");
        }
        while (scan.hasNextLine()) {
            line = scan.nextLine();
            //read in each line and add them to string "full"
            if (line == null) { //in case of nulls, just use a space
                line = " ";
            }
            //add a space to seperate each line
            full += " || " + line;
        }
        //create displayed so that it only contains a certain portion of full
        displayed = full.substring(counter1, counter2);
        charCount();
    }

    private static String getTxtFilePath() {
        //Config file path
        File config = new File("config.txt");
        // If it dodesnt exist, create it
        if (!config.exists()) {
            try {
                config.createNewFile();
            } catch (IOException ex) {
                System.out.println("An error occured with the config file. Try again.");
            }
        }
        String line = "";
        Scanner scan;
        // Find the path name given by the user in the config file
        try {
            scan = new Scanner(config);
            for (int i = 0; i < 4; i++) {
                line = scan.nextLine();
            }
        } catch (FileNotFoundException ex) {
            System.out.println("An error occured with finding the config flie. Try again.");
        }
        return line;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private int charCount() {
        //if charLimit doenst exist yet, calculate it
        if (charLimit < 0) {
            charLimit = full.length();
        }
        return charLimit;
    }

    
    private void shift() {
        //move the star and end counters up to shift by 1 full letter
        counter1++;
        counter2++;
        //in case the end is over the limit
        if (counter2 >= charLimit) {
            //if both are over the limit
            if (counter1 >= charLimit) {
                displayed = full.substring(counter1 % charLimit, counter2 % charLimit);
                //bring them back under the limit
                counter1 -= charLimit;
                counter2 -= charLimit;
            } else { //if only the end is over the limit
                displayed = full.substring(counter1 % charLimit) + full.substring(0, counter2 % charLimit);
            }
        } else { // if the end is not over the limit
            displayed = full.substring(counter1 % charLimit, counter2 % charLimit);
        }
        if (label != null) { 
            label.setText(displayed);
        }
    }

    /**
     * animate a label with the text from the file
     *
     * @param label the label to be animated
     */
    public void anim(javax.swing.JLabel label) {
        //set a timer for animation
        this.label = label;
        Timer t1 = new Timer(175, new TimerListener());
        t1.start();
    }

    public class TimerListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            //shift the letter over
            shift();
            //update window
            repaint();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
